
name: PR Description Validator

on:
  pull_request:
    types: [opened, synchronize, edited, reopened]

jobs:
  validate-pr-description:
    name: Validate PR Description
    runs-on: ubuntu-latest
    steps:
    - name: Set up workspace
      uses: actions/checkout@v2

    - name: Validate PR Description
      run: |
        # Ensure jq is installed
        sudo apt-get install jq

        # Fetch PR description using jq
        PR_DESCRIPTION=$(jq -r ".pull_request.body" "$GITHUB_EVENT_PATH")

        # Check that at least one Type of Change checkbox is checked
        if [[ ! $PR_DESCRIPTION =~ \[x\].*Bug\ fix && ! $PR_DESCRIPTION =~ \[x\].*New\ feature && ! $PR_DESCRIPTION =~ \[x\].*Breaking\ change && ! $PR_DESCRIPTION =~ \[x\].*Documentation\ update ]]; then
          echo "Error: At least one 'Type of Change' checkbox must be checked."
          exit 1
        fi

        # Check that at least one Testing checkbox is checked
        if [[ ! $PR_DESCRIPTION =~ \[x\].*I\ have\ tested\ these\ changes\ locally && ! $PR_DESCRIPTION =~ \[x\].*I\ have\ added\ tests ]]; then
          echo "Error: At least one 'Testing' checkbox must be checked."
          exit 1
        fi

        # Check that at least one Checklist item is checked
        if [[ ! $PR_DESCRIPTION =~ \[x\].*My\ code\ follows\ the\ code\ style && ! $PR_DESCRIPTION =~ \[x\].*I\ have\ updated\ the\ documentation && ! $PR_DESCRIPTION =~ \[x\].*I\ have\ filled\ out\ the\ changelog ]]; then
          echo "Error: At least one 'Checklist' item must be checked."
          exit 1
        fi

        echo "âœ… PR description validation passed!"
    - name: Check changelog entry
      uses: actions/github-script@v7
      id: chagelog-validator
      with:
        script: |
          function validateChangelogEntry(prBody) {
            // Extract the type of change (look for checked boxes)
            const isBugFix = /- \[x\] Bug fix/.test(prBody);
            const isNewFeature = /- \[x\] New feature/.test(prBody);
            const isBreakingChange = /- \[x\] Breaking change/.test(prBody);
            const isDocUpdate = /- \[x\] Documentation update/.test(prBody);

            // Extract changelog sections
            const extractSection = (sectionName) => {
              const regex = new RegExp(`### ${sectionName}\\s*\\n([\\s\\S]*?)(?=### |## |$)`, 'i');
              const match = prBody.match(regex);
              
              if (match && match[1]) {
                const entries = match[1]
                  .split('\n')
                  .map(line => line.trim())
                  .filter(line => 
                    line && 
                    line !== '-' && 
                    !line.startsWith('<!--') && 
                    !line.startsWith('-->') &&
                    line.length > 1
                  );
                
                return entries.length > 0 ? entries : [];
              }
              
              return [];
            };

            const addedEntries = extractSection('Added');
            const changedEntries = extractSection('Changed');
            const fixedEntries = extractSection('Fixed');
            const securityEntries = extractSection('Security');

            const errors = [];

            if (isBugFix && fixedEntries.length === 0) {
              errors.push('Bug fix selected but "Fixed" section is empty. Please describe what was fixed.');
            }

            if (isNewFeature && addedEntries.length === 0) {
              errors.push('New feature selected but "Added" section is empty. Please describe what was added.');
            }

            if (isBreakingChange && changedEntries.length === 0) {
              errors.push('Breaking change selected but "Changed" section is empty. Please describe what changed.');
            }

            const hasAnyChangelogEntry = addedEntries.length > 0 || 
                                       changedEntries.length > 0 || 
                                       fixedEntries.length > 0 || 
                                       securityEntries.length > 0;

            if (!isDocUpdate && !isBugFix && !isNewFeature && !isBreakingChange && !hasAnyChangelogEntry) {
              errors.push('Please select a type of change and provide appropriate changelog entries.');
            }

            return {
              isValid: errors.length === 0,
              errors: errors,
              changeTypes: {
                bugFix: isBugFix,
                newFeature: isNewFeature,
                breakingChange: isBreakingChange,
                docUpdate: isDocUpdate
              },
              changelogEntries: {
                added: addedEntries,
                changed: changedEntries,
                fixed: fixedEntries,
                security: securityEntries
              }
            };
          }

          const prBody = context.payload.pull_request.body || '';
          core.setOutput('pr_body', prBody);
          const validation = validateChangelogEntry(prBody);

          if (!validation.isValid) {
            const errorMessage = validation.errors.join('\n- ');
            core.setFailed(`Changelog validation failed:\n- ${errorMessage}`);
          } else {
            console.log('Changelog validation passed!');
            console.log('Change types:', validation.changeTypes);
            console.log('Changelog entries:', validation.changelogEntries);
          }
    
    - name: Display output
      run: |
        echo "The message is: ${{ steps.chagelog-validator.outputs.pr_body }}"
          